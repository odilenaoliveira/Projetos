# -*- coding: utf-8 -*-
"""carros_usados.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W0Lhkh3vmSVOLPQejmWpsyIi5imkEaq-
"""



# Importando Bibliotecas 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from math import sqrt
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_squared_error

# criando função para retirada de outliers
def drop_outliers(data,col):
    iqr = 1.5 * (np.percentile(data[col], 75) - np.percentile(data[col], 25))
    data.drop(data[data[col] > (iqr + np.percentile(data[col], 75))].index, inplace=True)
    data.drop(data[data[col] < (np.percentile(data[col], 25) - iqr)].index, inplace=True)

# Carregando os dados junto com as suas informações
def load_data(filename):
  dados = pd.read_csv(filename, sep=',')

  # Informações dos Dados
  print('============== TAMANHO DADOS ==============')
  print('Linhas',dados.shape[0])
  print('Colunas',dados.shape[1])
  print('Dados duplicados',dados.duplicated().sum())

  tabela = pd.DataFrame({
      'ValUni':dados.nunique(),
      'ValNull':dados.isnull().sum(),
      'ValNullPercent':dados.isna().sum() / len(dados)*100,
      'ValType':dados.dtypes.values
  })
  print('============== TABELA INFORMAÇÃO DADOS ==============')
  display(tabela)
  print('-'*70)
  print('============== DESCRIÇÃO DADOS ==============')
  display(dados.describe())
  print('============= AS PRIMEIRA 5 LINHAS DOS DADOS =============')
  display(dados.head())
  print()
  print()
  return dados


def transformacao(dados):
  dados.drop_duplicates(inplace=True)
  dados.dropna(inplace=True)
  
  # chamando função de eliminar outliers
  drop_outliers(dados,'Price')
  drop_outliers(dados,'Mileage')

  # Transformando dados categóricos
  le = LabelEncoder()

  cols = ['Year','City', 'State', 'Vin', 'Make', 'Model']
  encode = list(cols)
  dados[encode] = dados[encode].apply(lambda col: le.fit_transform(col))
  dados[encode].head()
  df = dados.copy()
  return df


def selecao(df):
  y = df['Price']
  x = df.drop('Price', axis=1)
  return x,y


def treinamento(x,y):
  x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3, random_state=42)

  scaler = MinMaxScaler()
  x_train = scaler.fit_transform(x_train)
  x_test = scaler.fit_transform(x_test)

  return x_train, x_test, y_train, y_test


def model_regression(x_train, x_test, y_train, y_test):
  forest = RandomForestRegressor(n_jobs=-1)
  forest.fit(x_train, y_train)

  y_pred_forest= forest.predict(x_test)

  y_pred = forest.predict(x_train)

  print('Acúracia do Treino:', forest.score(x_train, y_train))
  print('Acúracia do R2 score precisão do treino:', r2_score(y_train, y_pred))
  print()
  print('Acúracia do Teste:', forest.score(x_test, y_test))
  print()
  print('RSME do Treino:', sqrt(mean_squared_error(y_train, y_pred)))
  print('RSME de Teste:', sqrt(mean_squared_error(y_test, forest.predict(x_test))))
  print()
  print('MAE do Treino:', mean_squared_error(y_train, y_pred))
  print('MAE de Teste:', mean_squared_error(y_test, forest.predict(x_test)))
  print()
  print()

  return y_train, y_pred


def visual_data(y_train, y_pred):
  plt.figure(figsize=(14,7))

  plt.scatter(y_train, y_pred, c='green')
  plt.plot([y_train.min(), y_train.max()], [y_train.min(), y_train.max()], 'k--', c='red', lw=3)

  plt.xlabel('Valor Atual')
  plt.ylabel('Valor da Previsão')
  plt.title('Valor Atual vs Previsão')
  plt.show()

def runModel(filename):
  dados = load_data(filename)
  dados = transformacao(dados)
  x,y = selecao(dados)
  x_train,x_test,y_train, y_test = treinamento(x,y)
  y_train, y_pred = model_regression(x_train,x_test,y_train, y_test)
  visual_data(y_train, y_pred)

if __name__ =='__main__':
  runModel('/content/true_car_listings.csv')