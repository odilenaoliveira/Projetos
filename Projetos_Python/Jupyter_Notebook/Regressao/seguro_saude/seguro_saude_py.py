# -*- coding: utf-8 -*-
"""seguro_saude.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g6mL2hASUyl98jFDWN32Z8AOyzADnHZT
"""



# Importando Bibliotecas
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from math import sqrt

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import r2_score, mean_squared_error


def load_data(filename):
  dados = pd.read_csv(filename)
  # criando uma tabela com as informações dos dados
  print('Tamanho dos Dados:',dados.shape)
  print('Dados Duplicados:',dados.duplicated().sum())
  print('-'*40)
  print()
  tabela = pd.DataFrame({
      'Unique':dados.nunique(),
      'Null':dados.isna().sum(),
      'Types':dados.dtypes.values
  })
  display(tabela)
  print('-'*40)
  print()
  display(dados.head())
  print('-'*40)
  print()
  return dados


def transform_data(dados):
  # Eliminando dados duplicados
  dados.drop_duplicates(inplace=True)
  # Copiando os dados originais
  df = dados.copy()
  # Substituindo palavras
  df.replace({'female':1, 'male':0, 'yes':1, 'no':0}, inplace=True)
  # Selecionando apenas dados categóricos
  cat = df.select_dtypes(include='O')
  # One Hot Encoding
  df = pd.get_dummies(df, columns=[col for col in df.columns if col in cat])
  return df


def split_data(df):
  y = df.charges.astype(int)
  x = df.drop('charges',axis=1)
  return x,y


def train_data(x,y, testSize, num):
  xtrain, xtest, ytrain,ytest = train_test_split(x,y,test_size=testSize, random_state=num)
  return xtrain, xtest, ytrain,ytest


def model_data(xtrain, xtest, ytrain,ytest):

  model = GradientBoostingRegressor(random_state=42)
  model.fit(xtrain, ytrain)

  y_pred = model.predict(xtrain)
  y_pred_g = model.predict(xtest)

  print('Acúracia do Treino:', model.score(xtrain, ytrain))
  print('Acúracia do R2 score precisão do treino:', r2_score(ytrain, y_pred))
  print()
  print('Acúracia do Teste:', model.score(xtest, ytest))
  print()
  print('RSME do Treino:', sqrt(mean_squared_error(ytrain, y_pred)))
  print('RSME de Teste:', sqrt(mean_squared_error(ytest, model.predict(xtest)))) 
  print()
  print('MAE do Treino:', mean_squared_error(ytrain, y_pred))
  print('MAE de Teste:', mean_squared_error(ytest, model.predict(xtest)))
  print('-'*40)
  print()
  return ytrain, y_pred


def visual_data(ytrain, y_pred):
  #plotando valores atuais e previsto
  plt.figure(figsize=(14,7))

  plt.scatter(ytrain, y_pred, c='blue')
  plt.plot([ytrain.min(), ytrain.max()], [ytrain.min(), ytrain.max()], 'k--', c='red', lw=3)

  plt.xlabel('Valor Atual')
  plt.ylabel('Valor da Previsão')
  plt.title('Valor Atual vs Previsão')
  return plt.show()

def runModel(filename):
  dados = load_data(filename)
  df = transform_data(dados)
  x,y = split_data(df)
  xtrain, xtest, ytrain,ytest = train_data(x,y, 0.2, 42)
  ytrain, y_pred = model_data(xtrain, xtest, ytrain,ytest)
  visual_data(ytrain, y_pred)

if __name__ == '__main__':
  runModel('/content/insurance.csv')